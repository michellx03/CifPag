package br.com.cifpag.controller;

import java.io.IOException;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.validation.*;

import br.com.cifpag.entity.SimpleUploadFile;
import br.com.cifpag.uteis.SimpleUploadFileValidator;
import br.com.cifpag.uteis.UploadFileHelper;

@Controller
@RequestMapping("/Pedido")
public class PedidoController {
	
	@RequestMapping(value="/XMLGet", method = RequestMethod.GET)
	public String arquivoXml(ModelMap modelMap) {
		modelMap.put("xmlFile", new SimpleUploadFile());
		return "redirect:/Pedido/Consulta?mensagem=sucesso";
	}
	
	@RequestMapping(value="XMLPost", method = RequestMethod.POST)
	public String arquivoXml(@ModelAttribute("xmlFile") @Validated SimpleUploadFile simpleUploadFile, BindingResult bindResult, ModelMap modelMap) {
		
		SimpleUploadFileValidator simpleUploadFileValidator = new SimpleUploadFileValidator();
		simpleUploadFileValidator.validate(simpleUploadFile, bindResult);
		if (bindResult.hasErrors()) {
			modelMap.put("erroMessage", "Importado arquivo XML");
			return "redirect:/Pedido/Consulta?mensagem=sucesso";
		}
		else {
			try {
				String xmlFileName = UploadFileHelper.simpleUpload(photo.getFile(), request, true, "content");
				
				JAXBContext context = JAXBContext.newInstance(ProductimportList.class);
				Unmarshaller u = context.createUnmarshaller();
				ProductimportList productImportList = (ProductimportList) u.unmarshal(new File(xmlFileName));
				ProdctuImportModel productimport = new ProductImportModel();
				for (Proctuimport productImportModel : productimportList.getProductImport()) {
					productImportModel.create(productimport);
				}
				
				modelMap.put("listProduct", productImportModel.findAll());
				return "sucess";
			} catch (Exception e) {
				modelMap.put("errorMessage", "Nao foi possivel importa o arquivo XML");
				return "redirect:/Pedido/Consulta?mensagem=falha";
			}
		}
		
		return "redirect:/Pedido/Consulta?mensagem=sucesso";
	}


	@RequestMapping(value = "/Consulta")
	public ModelAndView ViewDashboardAlteracao(String pedido) {
		ModelAndView view = new ModelAndView("Pedido/Consulta");
		view.addObject("pedido", pedido);
		return view;
	}
	
	@RequestMapping(value = "/LerPedidoXML")
	public String LerPedidoXML() {		
		
		try {
			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			
			try {
				Document doc = builder.parse("/home/michell/Documentos/Softwares/CifPag/Arquivos/arquivoMichel.XML");
				
				NodeList listaDeVenda = doc.getElementsByTagName("venda");
				int tamanhoDaLista = listaDeVenda.getLength();
				
				NodeList listaDeProdutos = doc.getElementsByTagName("item");
				int tamanhoDaListaDeProdutos = listaDeProdutos.getLength();
				
				for(int k = 0; k < tamanhoDaListaDeProdutos; k++){
					Node noDeProdutos = listaDeProdutos.item(k);
					
					if(noDeProdutos.getNodeType() == Node.ELEMENT_NODE){
						Element elementoProduto = (Element) noDeProdutos;
						NodeList listaNosFilhosProdutos = elementoProduto.getChildNodes();
						int tamandoListaNosFilhosProdutos = listaNosFilhosProdutos.getLength();
						
						for(int l = 0; l < tamandoListaNosFilhosProdutos; l++){
							Node nosFilhoProdutos = listaNosFilhosProdutos.item(l);
							
							if(nosFilhoProdutos.getNodeType() == Node.ELEMENT_NODE){
								Element elementoNoProduto = (Element) nosFilhoProdutos;
								
								switch(elementoNoProduto.getTagName()){
								case "VDIPRONOME":
									System.out.println("Produto: " + elementoNoProduto.getTextContent());
									break;
								case "VDIQTDE":
									System.out.println("Quantidade: " + elementoNoProduto.getTextContent());
									break;
								case "VDIVALOR":
									System.out.println("PrecoUnitario: " + elementoNoProduto.getTextContent());
									break;
								}
							}
						}
					}
				}//FIM DO FOR DE PRODUTOS
				
				for(int i = 0; i < tamanhoDaLista; i++ ){
					Node noDeVenda = listaDeVenda.item(i);
					
					if(noDeVenda.getNodeType() == Node.ELEMENT_NODE){
						Element elementoVenda = (Element) noDeVenda;
						NodeList listaNosFilhosVenda = elementoVenda.getChildNodes();
						int tamanhoListaNosFilhosVenda = listaNosFilhosVenda.getLength();
						
						for(int j = 0; j < tamanhoListaNosFilhosVenda; j++){
							Node noFilhosVenda = listaNosFilhosVenda.item(j);
							
							if(noFilhosVenda.getNodeType() == Node.ELEMENT_NODE){
								Element elementoNoVenda = (Element) noFilhosVenda;
								
								switch(elementoNoVenda.getTagName()){
									case "VEDCLINOME":
										System.out.println("Cliente: " + elementoNoVenda.getTextContent());
										break;
									case "VEDID":
										System.out.println("NumeroDocumento: " + elementoNoVenda.getTextContent());
										break;
									case "VEDABERTURA":
										System.out.println("DataDocumento: " + elementoNoVenda.getTextContent());
										break;
								}
							}
						}
					}
				}//FIM DO FOR DE DADOS USUARIO	
				
				//FALTA CRIAR AS FK PARA VINCULACAO AGUARDANDO O CPF
			} catch (SAXException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}	
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		}
		return "redirect:/Pedido/Consulta?mensagem=sucesso";
	}
	
	//CONTINUA
}
